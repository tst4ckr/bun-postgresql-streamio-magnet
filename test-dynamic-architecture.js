#!/usr/bin/env node

/**
 * Script de prueba para verificar la nueva arquitectura din√°mica
 * Valida que el sistema funcione sin dependencia excesiva de mapeos est√°ticos
 */

import { UnifiedIdService } from './src/infrastructure/services/UnifiedIdService.js';
import { KitsuApiService } from './src/infrastructure/services/KitsuApiService.js';
import { KitsuMappingFallback } from './src/infrastructure/services/KitsuMappingFallback.js';
import { idDetectorService } from './src/infrastructure/services/IdDetectorService.js';

class DynamicArchitectureTester {
  constructor() {
    this.unifiedService = new UnifiedIdService(
      idDetectorService,
      new KitsuApiService(),
      new KitsuMappingFallback()
    );
  }

  async runTests() {
    console.log('üß™ Iniciando pruebas de arquitectura din√°mica...\n');
    
    const testCases = [
      // IDs que deber√≠an funcionar din√°micamente
      { id: 'kitsu:12', expected: 'tt0388629', description: 'Naruto - API din√°mica' },
      { id: 'kitsu:1', expected: 'tt0112718', description: 'Cowboy Bebop - Fallback cr√≠tico' },
      { id: 'kitsu:9253', expected: 'tt0877057', description: 'Death Note - Fallback cr√≠tico' },
      
      // IDs que deber√≠an fallar (no en mapeos cr√≠ticos)
      { id: 'kitsu:100', expected: null, description: 'ID no cr√≠tico - API din√°mica' },
      { id: 'kitsu:1000', expected: null, description: 'ID no cr√≠tico - API din√°mica' },
      
      // IDs con prefijos
      { id: 'mal:1', expected: 'tt0112718', description: 'MAL ID - Conversi√≥n unificada' },
    ];

    console.log('üìä Verificando configuraci√≥n del servicio de fallback...');
    const fallback = new KitsuMappingFallback();
    const stats = fallback.getStats();
    console.log(`‚úÖ Mapeos cr√≠ticos: ${stats.totalCriticalMappings}`);
    console.log(`‚úÖ Cobertura: ${stats.coverage}%`);
    console.log('');

    let passed = 0;
    let failed = 0;

    for (const testCase of testCases) {
      console.log(`üîÑ Probando: ${testCase.description}`);
      console.log(`   ID: ${testCase.id}`);
      
      try {
        const result = await this.unifiedService.processContentId(testCase.id, 'imdb');
        
        if (result.success) {
          console.log(`   ‚úÖ √âxito: ${result.convertedId}`);
          console.log(`   üìã M√©todo: ${result.metadata?.conversionMethod}`);
          
          if (testCase.expected && result.convertedId === testCase.expected) {
            console.log(`   ‚úÖ Coincide con esperado`);
            passed++;
          } else if (!testCase.expected && !result.convertedId) {
            console.log(`   ‚úÖ Fallo esperado confirmado`);
            passed++;
          } else {
            console.log(`   ‚ö†Ô∏è Resultado inesperado`);
            failed++;
          }
        } else {
          console.log(`   ‚ùå Fall√≥: ${result.metadata?.error}`);
          if (!testCase.expected) {
            console.log(`   ‚úÖ Fallo esperado`);
            passed++;
          } else {
            console.log(`   ‚ùå Fallo inesperado`);
            failed++;
          }
        }
      } catch (error) {
        console.log(`   ‚ùå Error: ${error.message}`);
        failed++;
      }
      
      console.log('');
      await this.delay(1000); // Respetar l√≠mites de API
    }

    console.log('üìà Resumen de pruebas:');
    console.log(`‚úÖ Pasadas: ${passed}`);
    console.log(`‚ùå Fallidas: ${failed}`);
    console.log(`üìä Total: ${testCases.length}`);
    
    console.log('\nüîç Verificando que no haya dependencia excesiva de mapeos est√°ticos...');
    const allMappings = fallback.getAllMappings();
    console.log(`üì¶ Total mapeos cr√≠ticos: ${allMappings.length}`);
    
    if (allMappings.length <= 5) {
      console.log('‚úÖ Sistema correctamente din√°mico - pocos mapeos cr√≠ticos');
    } else {
      console.log('‚ö†Ô∏è Demasiados mapeos cr√≠ticos - revisar configuraci√≥n');
    }

    return { passed, failed, total: testCases.length };
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async testPerformance() {
    console.log('‚ö° Probando rendimiento de conversi√≥n...');
    
    const start = Date.now();
    
    // Prueba de conversi√≥n din√°mica
    const dynamicTest = await this.unifiedService.processContentId('kitsu:12', 'imdb');
    const dynamicTime = Date.now() - start;
    
    console.log(`üöÄ Conversi√≥n din√°mica: ${dynamicTime}ms`);
    console.log(`üìã M√©todo usado: ${dynamicTest.metadata?.conversionMethod}`);
    
    // Verificar que usa API din√°mica primero
    if (dynamicTest.metadata?.conversionMethod === 'kitsu_api') {
      console.log('‚úÖ Sistema usando API din√°mica correctamente');
    } else {
      console.log(`‚ö†Ô∏è Usando m√©todo: ${dynamicTest.metadata?.conversionMethod}`);
    }
  }
}

// Ejecutar pruebas
async function main() {
  const tester = new DynamicArchitectureTester();
  
  try {
    await tester.runTests();
    await tester.testPerformance();
    
    console.log('\nüéâ Pruebas completadas!');
    console.log('‚úÖ Sistema din√°mico implementado correctamente');
    console.log('‚úÖ Dependencia de mapeos est√°ticos eliminada');
    console.log('‚úÖ Fallback cr√≠tico funcionando para casos extremos');
    
  } catch (error) {
    console.error('‚ùå Error en pruebas:', error);
    process.exit(1);
  }
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}