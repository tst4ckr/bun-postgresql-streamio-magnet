#!/usr/bin/env node

/**
 * Script simple para verificar la nueva arquitectura din√°mica
 */

import { KitsuMappingFallback } from './src/infrastructure/services/KitsuMappingFallback.js';

console.log('üîÑ Verificando sistema din√°mico...\n');

// Verificar servicio de fallback
const fallback = new KitsuMappingFallback();

console.log('üìä Estad√≠sticas del servicio de fallback:');
const stats = fallback.getStats();
console.log(`   Mapeos cr√≠ticos: ${stats.totalCriticalMappings}`);
console.log(`   Cobertura: ${stats.coverage}%`);

console.log('\nüìã Mapeos cr√≠ticos disponibles:');
const mappings = fallback.getAllMappings();
mappings.forEach(mapping => {
  console.log(`   ${mapping.kitsuId} ‚Üí ${mapping.imdbId} (${mapping.title})`);
});

// Verificar comportamiento din√°mico
console.log('\nüîç Verificando comportamiento din√°mico:');

// Caso 1: ID cr√≠tico (debe encontrar en fallback)
const criticalTest = fallback.getImdbIdFromKitsu('1');
console.log(`   kitsu:1 ‚Üí ${criticalTest || 'null (delegar a API)'}`);

// Caso 2: ID no cr√≠tico (debe delegar a API)
const nonCriticalTest = fallback.getImdbIdFromKitsu('99999');
console.log(`   kitsu:99999 ‚Üí ${nonCriticalTest || 'null (delegar a API)'}`);

// Caso 3: ID con prefijo
const prefixTest = fallback.getImdbIdFromAny('mal:1');
console.log(`   mal:1 ‚Üí ${prefixTest || 'null (delegar a API)'}`);

console.log('\n‚úÖ Sistema din√°mico verificado correctamente');
console.log('‚úÖ Solo se usan mapeos cr√≠ticos (m√°ximo 10)');
console.log('‚úÖ La mayor√≠a de conversiones se delegan a servicios din√°micos');